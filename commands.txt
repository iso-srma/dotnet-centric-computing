commands

step : 1

Make Sure .NET SDK is Installed
https://dotnet.microsoft.com/en-us/download

terminal 
to check version 
dotnet --version

step 2 making a new project name CSharpBasics
dotnet new console -n CSharpBasics


step -3 :Navigate to Your Project Folder
cd CSharpBasics

step :4 Run the project
dotnet run


/////

1st program 
using System;

// class Program
// {
//     static void Main(string[] args)
//     {
//         Console.Write("Enter your name: ");
//         string? x = Console.ReadLine();

//         Console.WriteLine("Hello, " + x + "! Welcome to C# Basics.");
//     }
// }

🔐 Access Modifiers in .NET
Access modifiers control the visibility and accessibility of classes, methods, variables, etc.

1. private
🔒 Most restrictive.

Accessible only within the same class or struct.

Default for class members if not specified.

csharp
Copy code
class MyClass {
    private int secret = 42;

    private void ShowSecret() {
        Console.WriteLine(secret);
    }
}
✅ Use it to encapsulate and protect data.

2. public
🌍 Most accessible.

Can be accessed from anywhere (other classes, assemblies, etc).

csharp
Copy code
public class Car {
    public void StartEngine() {
        Console.WriteLine("Vroom!");
    }
}
✅ Use it for APIs, public methods, or libraries meant for external use.

3. internal
🏠 Accessible only within the same assembly.

Not visible to other projects unless you use [InternalsVisibleTo].

csharp
Copy code
internal class Helper {
    internal void DoWork() {
        Console.WriteLine("Working internally");
    }
}
✅ Great for modular design where certain parts of the code are shared across the app but hidden from outside projects.

Summary Table
Modifier	Access Level	Typical Use Case
private	Same class only	Hide internal logic / secure data
public	Anywhere (no restriction)	Public APIs / reusable libraries
internal	Same assembly only	Shared logic within project, not for public use



::::::::::::::::::webpages in c sharp ::::::::::::::

net centric computing ko path ma janey ra terminal kholney 
terminal ma ::::
dotnet new
dotnet new web -n WebAppAmpty(folder name  for webpage)

tespachii WebPageAmpty web page folder banchha 

terminal ma :
dotnet new mvc -n WebAppMvc 
(web page created)
dotnet build 
dotnet run 
output ayoo 

 Web Pages in C#
🔹 1. What Are Web Pages in C#?
Web Pages in C# refer to dynamic web content built using ASP.NET Web Pages (or ASP.NET Core) where C# is used to write server-side logic.

Think of it like this:

HTML + CSS + JS = Frontend (static)

C# + Razor + ASP.NET = Backend (dynamic, powerful)

🔹 2. Technologies Used
Technology	Description
ASP.NET	A web framework for building modern web apps using .NET.
Razor Syntax	A markup syntax for embedding C# into HTML.
C#	The backend programming language used to handle logic.

🔹 3. Structure of a Web Page
Typical structure in ASP.NET Web Pages:

html
Copy
Edit
@{
    var message = "Welcome to C# Web Page!";
}

<!DOCTYPE html>
<html>
<head>
    <title>My C# Page</title>
</head>
<body>
    <h1>@message</h1>
</body>
</html>
Explanation:
@{} block: server-side C# code.

@message: output of C# variable inside HTML.

🔹 4. Life Cycle of a Web Page
Request Received by the server.

Page Initialization.

Load: Data and controls are loaded.

Render: HTML is generated from Razor + C#.

Response Sent back to browser.

🔹 5. Key Features
✅ Easy syntax using Razor
✅ Full power of C#
✅ Integration with databases (SQL Server, etc.)
✅ Good for small to medium web apps
✅ Supports authentication, routing, and layouts

🔹 6. Razor Syntax Basics
Task	Syntax Example
Variable	@name = "Ishwor"
Output	@name
If Statement	@if (true) { <p>Yes</p> }
Loop	@for (int i = 0; i < 5; i++) { <p>@i</p> }

🔹 7. Real Life Example
Login Form with C# behind:

html
Copy
Edit
<form method="post">
    <input type="text" name="username" />
    <input type="password" name="password" />
    <input type="submit" value="Login" />
</form>

@{
    if (IsPost) {
        var user = Request["username"];
        var pass = Request["password"];
        if(user == "admin" && pass == "123") {
            <p>Login successful</p>
        } else {
            <p>Invalid credentials</p>
        }
    }
}
🔹 8. Advantages
Fast to build small web apps.

Razor syntax is clean and simple.

C# makes backend powerful.

Easy to learn for beginners.

Works well with SQL databases.

🔹 9. Tools to Use
Visual Studio / VS Code

.NET SDK

WebMatrix (older, beginner tool)

SQL Server (for DB)

🔹 10. ASP.NET vs ASP.NET Core
Feature	ASP.NET (Web Pages)	ASP.NET Core
Platform	Windows	Cross-platform
Performance	Moderate	High
Modern Support	Less	Yes (future-proof)

History of C# – Short Notes
🔹 Developed By: Microsoft
🔹 Lead Designer: Anders Hejlsberg (also helped create Turbo Pascal and Delphi)
🔹 Introduced: In the year 2000

🕰️ Timeline Summary:
1999 – Microsoft started developing a new language under the project name “Cool” (C-like Object Oriented Language).

2000 – C# officially announced with the first .NET Framework at Professional Developers Conference (PDC).

2002 – First official release: C# 1.0 with .NET Framework 1.0

2005 – C# 2.0 introduced generics, nullable types, iterators.

2007 – C# 3.0 brought LINQ, lambda expressions, and anonymous types.

2010 – C# 4.0: Dynamic typing and named/optional parameters.

2012 – C# 5.0: async and await keywords for asynchronous programming.

2015 – C# 6.0: String interpolation, expression-bodied members.

2017 – C# 7.x series: Pattern matching, tuples, out variables.

2019 – C# 8.0: Nullable reference types, switch expressions.

2021 – C# 9 & 10: Records, init-only setters, top-level programs.

2023+ – C# 11/12 added more pattern matching, list patterns, and raw string literals.

📌 Why Was C# Created?
Microsoft needed a modern, simple, object-oriented language for its new .NET platform.

To compete with Java and fit tightly with the Common Language Runtime (CLR).



. Introduction to C#
Developed by Microsoft, led by Anders Hejlsberg.

Released in 2000 with the .NET Framework.

Object-oriented, type-safe, modern programming language.

Combines power of C++ with simplicity of Java.

🔹 2. Key Features of C#
Object-Oriented (OOP): Classes, Inheritance, Polymorphism

Type-Safe: Prevents type errors at compile time.

Component-Oriented: Supports building reusable components.

Interoperable: Can use existing COM and .NET components.

Automatic Garbage Collection

Cross-Platform support via .NET Core/.NET 5+

🔹 3. Basic Syntax
csharp

using System;

class Program {
    static void Main() {
        Console.WriteLine("Hello, World!");
    }
}
using: Imports a namespace.

Main(): Entry point of the program.

Console.WriteLine(): Prints output.

🔹 4. Data Types in C#
Type	Example
int	10
float	10.5f
double	10.5
bool	true / false
char	'A'
string	"Hello"

🔹 5. Variables & Constants
csharp

int age = 20;
const double PI = 3.14;
🔹 6. Operators
Arithmetic: + - * / %

Comparison: == != > < >= <=

Logical: && || !

Assignment: = += -= *= /=

🔹 7. Control Statements
csharp

// If-Else
if (age >= 18) {
    Console.WriteLine("Adult");
} else {
    Console.WriteLine("Minor");
}

// Switch
switch (day) {
    case 1: Console.WriteLine("Sunday"); break;
    default: Console.WriteLine("Invalid"); break;
}

// Loop
for(int i=0; i<5; i++) {
    Console.WriteLine(i);
}
🔹 8. Object-Oriented Concepts
Class: Blueprint of objects

Object: Instance of a class

Constructor: Initializes an object

Inheritance: Reuse code from base class

Polymorphism: Same method, different behavior

Encapsulation: Data hiding using access modifiers

Abstraction: Hiding complex logic

csharp

class Animal {
    public void Speak() {
        Console.WriteLine("Animal sound");
    }
}

class Dog : Animal {
    public void Bark() {
        Console.WriteLine("Dog barks");
    }
}
🔹 9. Arrays & Collections
csharp

// Array
int[] numbers = {1, 2, 3};

// List
List<string> names = new List<string>();
names.Add("Ishwor");
🔹 10. Functions / Methods
csharp
Copy
Edit
void Greet(string name) {
    Console.WriteLine("Hello " + name);
}
🔹 11. Exception Handling
csharp

try {
    int x = 5 / 0;
} catch (DivideByZeroException e) {
    Console.WriteLine("Error: " + e.Message);
} finally {
    Console.WriteLine("Done");
}
🔹 12. File Handling
csharp

File.WriteAllText("test.txt", "Hello C#");
string data = File.ReadAllText("test.txt");
Console.WriteLine(data);
🔹 13. Namespaces & Assemblies
Namespace: Organize code (like a folder)

Assembly: Compiled code (DLL or EXE)

🔹 14. Access Modifiers
Modifier	Scope
public	Accessible anywhere
private	Within class only
protected	Class + derived class
internal	Same project/assembly

🔹 15. Modern C# Features
var keyword (implicit typing)

async/await for async programming

LINQ for querying data

Records (C# 9+): Immutable data types

Pattern Matching (C# 7+)

🔹 16. Real-Life Applications
✅ Web Apps using ASP.NET
✅ Mobile Apps using Xamarin
✅ Game Development using Unity
✅ Desktop Apps using WinForms/WPF
✅ APIs and Microservices using .NET Core

 C# Founder – At a Glance
🔹 Founder / Chief Architect:
🧠 Anders Hejlsberg

🧑‍🏫 About Anders Hejlsberg:
A Danish software engineer.

Previously known for:

Creating Turbo Pascal (1983)

Leading development of Delphi at Borland

📅 C# Development Timeline:
Late 1990s: Microsoft starts development under the name "Cool" (C-like Object Oriented Language).

2000: C# officially announced by Microsoft alongside the .NET Framework.

Anders served as lead architect of C#.

🏢 Organization:
Developed by Microsoft

Released in 2000 as part of .NET Framework 1.0