commands

step : 1

Make Sure .NET SDK is Installed
https://dotnet.microsoft.com/en-us/download

terminal 
to check version 
dotnet --version

step 2 making a new project name CSharpBasics
dotnet new console -n CSharpBasics


step -3 :Navigate to Your Project Folder
cd CSharpBasics

step :4 Run the project
dotnet run


/////

1st program 
using System;

// class Program
// {
//     static void Main(string[] args)
//     {
//         Console.Write("Enter your name: ");
//         string? x = Console.ReadLine();

//         Console.WriteLine("Hello, " + x + "! Welcome to C# Basics.");
//     }
// }

🔐 Access Modifiers in .NET
Access modifiers control the visibility and accessibility of classes, methods, variables, etc.

1. private
🔒 Most restrictive.

Accessible only within the same class or struct.

Default for class members if not specified.

csharp
Copy code
class MyClass {
    private int secret = 42;

    private void ShowSecret() {
        Console.WriteLine(secret);
    }
}
✅ Use it to encapsulate and protect data.

2. public
🌍 Most accessible.

Can be accessed from anywhere (other classes, assemblies, etc).

csharp
Copy code
public class Car {
    public void StartEngine() {
        Console.WriteLine("Vroom!");
    }
}
✅ Use it for APIs, public methods, or libraries meant for external use.

3. internal
🏠 Accessible only within the same assembly.

Not visible to other projects unless you use [InternalsVisibleTo].

csharp
Copy code
internal class Helper {
    internal void DoWork() {
        Console.WriteLine("Working internally");
    }
}
✅ Great for modular design where certain parts of the code are shared across the app but hidden from outside projects.

Summary Table
Modifier	Access Level	Typical Use Case
private	Same class only	Hide internal logic / secure data
public	Anywhere (no restriction)	Public APIs / reusable libraries
internal	Same assembly only	Shared logic within project, not for public use



::::::::::::::::::webpages in c sharp ::::::::::::::

net centric computing ko path ma janey ra terminal kholney 
terminal ma ::::
dotnet new
dotnet new web -n WebAppAmpty(folder name  for webpage)

tespachii WebPageAmpty web page folder banchha 

terminal ma :
dotnet new mvc -n WebAppMvc 
(web page created)
dotnet build 
dotnet run 
output ayoo 

 Web Pages in C#
🔹 1. What Are Web Pages in C#?
Web Pages in C# refer to dynamic web content built using ASP.NET Web Pages (or ASP.NET Core) where C# is used to write server-side logic.

Think of it like this:

HTML + CSS + JS = Frontend (static)

C# + Razor + ASP.NET = Backend (dynamic, powerful)

🔹 2. Technologies Used
Technology	Description
ASP.NET	A web framework for building modern web apps using .NET.
Razor Syntax	A markup syntax for embedding C# into HTML.
C#	The backend programming language used to handle logic.

🔹 3. Structure of a Web Page
Typical structure in ASP.NET Web Pages:

html
Copy
Edit
@{
    var message = "Welcome to C# Web Page!";
}

<!DOCTYPE html>
<html>
<head>
    <title>My C# Page</title>
</head>
<body>
    <h1>@message</h1>
</body>
</html>
Explanation:
@{} block: server-side C# code.

@message: output of C# variable inside HTML.

🔹 4. Life Cycle of a Web Page
Request Received by the server.

Page Initialization.

Load: Data and controls are loaded.

Render: HTML is generated from Razor + C#.

Response Sent back to browser.

🔹 5. Key Features
✅ Easy syntax using Razor
✅ Full power of C#
✅ Integration with databases (SQL Server, etc.)
✅ Good for small to medium web apps
✅ Supports authentication, routing, and layouts

🔹 6. Razor Syntax Basics
Task	Syntax Example
Variable	@name = "Ishwor"
Output	@name
If Statement	@if (true) { <p>Yes</p> }
Loop	@for (int i = 0; i < 5; i++) { <p>@i</p> }

🔹 7. Real Life Example
Login Form with C# behind:

html
Copy
Edit
<form method="post">
    <input type="text" name="username" />
    <input type="password" name="password" />
    <input type="submit" value="Login" />
</form>

@{
    if (IsPost) {
        var user = Request["username"];
        var pass = Request["password"];
        if(user == "admin" && pass == "123") {
            <p>Login successful</p>
        } else {
            <p>Invalid credentials</p>
        }
    }
}
🔹 8. Advantages
Fast to build small web apps.

Razor syntax is clean and simple.

C# makes backend powerful.

Easy to learn for beginners.

Works well with SQL databases.

🔹 9. Tools to Use
Visual Studio / VS Code

.NET SDK

WebMatrix (older, beginner tool)

SQL Server (for DB)

🔹 10. ASP.NET vs ASP.NET Core
Feature	ASP.NET (Web Pages)	ASP.NET Core
Platform	Windows	Cross-platform
Performance	Moderate	High
Modern Support	Less	Yes (future-proof)

History of C# – Short Notes
🔹 Developed By: Microsoft
🔹 Lead Designer: Anders Hejlsberg (also helped create Turbo Pascal and Delphi)
🔹 Introduced: In the year 2000
